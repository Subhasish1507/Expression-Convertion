#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct stack
{
    int size;
    int top;
    char** arr;
};

char* stackTop(struct stack *ptr)
{
    return ptr->arr[ptr->top];
}

int isEmpty(struct stack *ptr)
{
    if (ptr->top  <0 )
        return 1;
    return 0;
}

int isFull(struct stack *ptr)
{
    if (ptr->top > ptr->size - 1)
        return 1;
    return 0;
}

void push(struct stack *ptr, char* value)
{
    if (isFull(ptr))
    {
        printf("\nStack Overflow!");
        return;
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = value;
    }
}

char* pop(struct stack *ptr)
{
    if (isEmpty(ptr))
    {
        printf("\nStack underflow!");
        return NULL;
    }
    else
    {
        char* value = ptr->arr[ptr->top];
        ptr->top--;
        return value;
    }
}


int isOperator(char ch)
{
    if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

char* postfixToinfix(char* postfix)
{
    struct stack* sp = (struct stack*)malloc(sizeof(struct stack));
    sp->size =100;
    sp->top = -1;
    sp->arr = (char**)malloc(sp->size*sizeof(char*));

    for(int i = 0 ; postfix[i]!='\0';i++)
    {
        char ch = postfix[i];
        if(!isOperator(ch))
        {
            char* operand = (char*)malloc(2*sizeof(char));
            operand[0] = ch;
            operand[1] = '\0';
            push(sp,operand);
        }
        else
        {
            char* op1 = pop(sp);
            char* op2 = pop(sp);

            char* infix = (char*)malloc(strlen(op1)+strlen(op2)+4);
            sprintf(infix,"(%s%c%s)",op2,ch,op1);
            push(sp,infix);
            free(op1);
            free(op2);
        }
    }
    char* result = pop(sp);
    free(sp->arr);
    free(sp);
    return result;
}

int main() {
    char* postfix = "ab+c*";

    // printf("Enter a postfix expression: ");
    // scanf("%s", postfix);

    char* res = postfixToinfix(postfix);
    printf("  %s",res);
    return 0;
}
