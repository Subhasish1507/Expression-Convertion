#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct stack
{
    int size;
    int top;
    char* arr;
};

char stackTop(struct stack* ptr)
{
    return ptr->arr[ptr->top];
}

int isEmpty(struct stack* ptr)
{
    if(ptr->top == -1)
        return 1;
    return 0;
}
int isFull(struct stack* ptr)
{
    if(ptr->top == ptr->size-1)
        return 1;
    return 0;
}

void push(struct stack* ptr , char value)
{
    ptr->top++;
    ptr->arr[ptr->top] = value;
}

char pop(struct stack* ptr)
{
    char ch = ptr->arr[ptr->top];
    ptr->top--;
    return ch;
}

int precedence(char ch)
{
    if(ch == '*' ||  ch == '/')
        return 3;
    else if(ch == '+' || ch == '-')
        return 2;
    return 0;
}

int isoperator(char ch)
{
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/')
        return 1;
    return 0;
}

char* reverseString(char* str)
{
    char* result = (char*)malloc((strlen(str)+1)*sizeof(char));
    int j = strlen(str)-1;
    for(int i = 0 ; i<strlen(str) ; i++)
    {
        if(str[j] == ')')
        {
            result[i] = '(';
        }
        else if(str[j] == '(')
        {
            result[i] = ')';
        }
        else
        {
            result[i] = str[j];
        }
        j--;
    }
    return result;
}

char* infixToPrefix(char* infix)
{
    struct stack* ptr = (struct stack*)malloc(sizeof(struct stack));
    ptr->size = strlen(infix)+1;
    ptr->top =-1;
    ptr->arr = (char*)malloc((strlen(infix)+1)*sizeof(char));

    char* prefix = (char*)malloc((strlen(infix)+1)*sizeof(char));
    infix = reverseString(infix);

    int i = 0;
    int j =0;

    while(infix[i] != '\0')
    {
        if(!isoperator(infix[i]))
        {
            prefix[j] = infix[i];
            j++;
            i++;
        }
        else if(infix[i] == '(')
        {
            push(ptr,'(');
            i++;
        }
        else if(infix[i] == ')')
        {
            while(ptr->arr[ptr->top] != '(')
            {
                prefix[j] = pop(ptr);
                j++;
            }
            pop(ptr);
            i++;
        }
        else
        {
            if(precedence(infix[i]) > precedence(stackTop(ptr)))
            {
                push(ptr,infix[i]);
                i++;
            }
            else
            {
                prefix[j] = pop(ptr);
                j++;
            }
        }

    }
    while(!isEmpty(ptr))
    {
        prefix[j] = pop(ptr);
        j++;
    }
    prefix[j] = '\0';
    prefix = reverseString(prefix);
    return prefix;
}

int main()
{
    char* infix = "a*(b+c)/e-f";
    
    char* get = infixToPrefix(infix);
    printf("\t%s",get);
    return 0;
}
